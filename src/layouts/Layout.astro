---
import "@/styles/globals.css";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import { ViewTransitions } from "astro:transitions";
interface Props {
  title?: string;
  image?: string;
  description?: string;
  url?: string;
}

const { title, image, description, url } = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    {title?(<title>{title} | SOTO</title>):(<title>SOTO</title>)}
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />

    <!-- Facebook Meta Tags -->
    <meta property="og:url" content={url} />
    <meta property="og:type" content="website" />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={image} />

    <!-- Twitter Meta Tags -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta property="twitter:domain" content="zzhgo.com" />
    <meta property="twitter:url" content={url} />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta property="twitter:image" content={image} />

    <!--	RSS-->
    <link
      rel="alternate"
      type="application/rss+xml"
      title="SOTO"
      href={new URL("rss.xml", Astro.site)}
    />
    <ViewTransitions />
  </head>
  <body class="bg-white text-black antialiased dark:bg-dark dark:text-soto-400">
    <div class="mx-auto max-w-3xl px-4 sm:px-6 xl:max-w-4xl xl:px-0">
      <Header />
      <slot class="mb-auto" />
      <Footer />
    </div>
  </body>
</html>

<script>
  document.addEventListener('astro:page-load',()=>{
    const theme = (() => {
    if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
      return localStorage.getItem("theme");
    }
    if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
      return "dark";
    }
    return "light";
  })();

  if (theme === "light") {
    document.documentElement.classList.remove("dark");
  } else {
    document.documentElement.classList.add("dark");
  }

  window.localStorage.setItem("theme", theme || "light");

  const handleToggleClick = () => {
    const element = document.documentElement;
    element.classList.toggle("dark");

    const isDark = element.classList.contains("dark");
    localStorage.setItem("theme", isDark ? "dark" : "light");
  };

  const themeToggleButton = document.getElementById("themeToggle");
  if (themeToggleButton) {
    themeToggleButton.addEventListener("click", handleToggleClick);
  }
  });
</script>
